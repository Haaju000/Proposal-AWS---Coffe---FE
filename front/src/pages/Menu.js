import React, { useState } from 'react';
import Header from '../components/Header';
import '../css/Menu.css';

const Menu = () => {
  const [activeFilter, setActiveFilter] = useState('All');
  const [cart, setCart] = useState({});
  const [itemQuantities, setItemQuantities] = useState({});

  // Helper functions for cart management
  const getItemPrice = (priceString) => {
    return parseFloat(priceString.replace('$', ''));
  };

  const getItemQuantity = (itemId) => {
    return itemQuantities[itemId] || 1;
  };

  const updateQuantity = (itemId, newQuantity) => {
    if (newQuantity < 1) newQuantity = 1;
    setItemQuantities(prev => ({
      ...prev,
      [itemId]: newQuantity
    }));
  };

  const addToCart = (item) => {
    const quantity = getItemQuantity(item.id);
    setCart(prev => ({
      ...prev,
      [item.id]: {
        ...item,
        quantity: (prev[item.id]?.quantity || 0) + quantity
      }
    }));
    // Reset quantity to 1 after adding
    setItemQuantities(prev => ({
      ...prev,
      [item.id]: 1
    }));
  };

  const removeFromCart = (itemId) => {
    setCart(prev => {
      const newCart = { ...prev };
      delete newCart[itemId];
      return newCart;
    });
  };

  const updateCartQuantity = (itemId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(itemId);
      return;
    }
    setCart(prev => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        quantity: newQuantity
      }
    }));
  };

  // Calculate cart totals
  const cartItems = Object.values(cart);
  const cartItemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const cartTotal = cartItems.reduce((sum, item) => sum + (getItemPrice(item.price) * item.quantity), 0);

  // Debug logs
  console.log('Cart state:', cart);
  console.log('Cart items:', cartItems);
  console.log('Cart count:', cartItemCount);

  const menuData = {
    coffee: [
      {
        id: 1,
        name: 'Espresso',
        description: 'C√† ph√™ ƒë·∫≠m ƒë·∫∑c, nguy√™n ch·∫•t v·ªõi h∆∞∆°ng v·ªã ƒë·∫≠m n√©t',
        price: '$3.50',
        category: 'Espresso',
        image: '‚òï'
      },
      {
        id: 2,
        name: 'Double Espresso',
        description: 'G·∫•p ƒë√¥i c∆∞·ªùng ƒë·ªô, g·∫•p ƒë√¥i s·ª± h√†i l√≤ng',
        price: '$4.50',
        category: 'Espresso',
        image: '‚òï'
      },
      {
        id: 3,
        name: 'Americano',
        description: 'Espresso h√≤a v·ªõi n∆∞·ªõc n√≥ng, v·ªã nh·∫π v√† m∆∞·ª£t',
        price: '$3.75',
        category: 'Espresso',
        image: '‚òï'
      },
      {
        id: 4,
        name: 'Latte',
        description: 'Espresso h√≤a kem s·ªØa h·∫•p, m·ªãn v√† ng·∫≠y',
        price: '$4.50',
        category: 'Latte',
        image: 'ü•õ'
      },
      {
        id: 5,
        name: 'Caramel Latte',
        description: 'V·ªã caramel ng·ªçt d·ªãu k·∫øt h·ª£p c√πng espresso v√† s·ªØa',
        price: '$5.00',
        category: 'Latte',
        image: 'ü•õ'
      },
      {
        id: 6,
        name: 'Vanilla Latte',
        description: 'H∆∞∆°ng vanilla d·ªãu nh·∫π c√πng s·ªØa t∆∞∆°i ƒë√°nh b·ªçt',
        price: '$5.00',
        category: 'Latte',
        image: 'ü•õ'
      },
      {
        id: 7,
        name: 'Cappuccino',
        description: 'Klassic √ù v·ªõi l·ªõp b·ªçt s·ªØa d√†y v√† v·ªã c√¢n b·∫±ng',
        price: '$4.25',
        category: 'Cappuccino',
        image: '‚òï'
      },
      {
        id: 8,
        name: 'Mocha Cappuccino',
        description: 'Cappuccino pha c√πng socola, v·ªã ng·ªçt d·ªãu v√† ƒë·∫≠m ƒë√†',
        price: '$4.75',
        category: 'Cappuccino',
        image: '‚òï'
      }
    ],
    pastries: [
      {
        id: 9,
        name: 'B√°nh s·ª´ng b√≤ (Croissant)',
        description: 'B√°nh b∆° gi√≤n, x·ªëp, n∆∞·ªõng h√†ng ng√†y',
        price: '$2.99',
        category: 'Pastries',
        image: 'ü•ê'
      },
      {
        id: 10,
        name: 'B√°nh muffin socola',
        description: 'Muffin socola ƒë·∫≠m v·ªõi v·ª•n socola b√™n trong',
        price: '$3.50',
        category: 'Pastries',
        image: 'üßÅ'
      },
      {
        id: 11,
        name: 'B√°nh Danish h·∫°nh nh√¢n',
        description: 'B√°nh ng·ªçt v·ªõi nh√¢n kem h·∫°nh nh√¢n th∆°m ngon',
        price: '$3.75',
        category: 'Pastries',
        image: 'ü•ê'
      }
    ]
  };

  const allItems = [...menuData.coffee, ...menuData.pastries];
  
  const filterItems = (categoryKey) => {
    if (categoryKey === 'All') return allItems;
    return allItems.filter(item => item.category === categoryKey);
  };

  const filteredItems = filterItems(activeFilter);

  const categories = [
    { key: 'All', label: 'T·∫•t c·∫£' },
    { key: 'Espresso', label: 'Espresso' },
    { key: 'Latte', label: 'Latte' },
    { key: 'Cappuccino', label: 'Cappuccino' },
    { key: 'Pastries', label: 'B√°nh ng·ªçt' }
  ];

  const activeLabel = categories.find(c => c.key === activeFilter)?.label || activeFilter;

  const categorySubtitle = (key) => {
    switch (key) {
      case 'All':
        return 'Kh√°m ph√° to√†n b·ªô th·ª±c ƒë∆°n c·ªßa ch√∫ng t√¥i';
      case 'Espresso':
        return 'C√°c ƒë·ªì u·ªëng espresso ƒë·∫≠m ƒë√† v√† m·∫°nh m·∫Ω';
      case 'Latte':
        return 'ƒê·ªì u·ªëng s·ªØa v·ªõi espresso, m·ªÅm m·∫°i v√† th∆°m';
      case 'Cappuccino':
        return 'C√°c m√≥n c·ªï ƒëi·ªÉn ki·ªÉu √ù v·ªõi l·ªõp b·ªçt s·ªØa d√†y';
      case 'Pastries':
        return 'B√°nh n∆∞·ªõng t∆∞∆°i ngon, ph√π h·ª£p d√πng k√®m c√† ph√™';
      default:
        return '';
    }
  };

  return (
    <div className="menu-page">
      <Header />
      
      <main className="menu-main">
        <div className="menu-container">
          {/* Sidebar */}
          <aside className="menu-sidebar">
            <div className="sidebar-header">
              <h2 className="sidebar-title">Th·ª±c ƒë∆°n</h2>
            </div>
            
            {/* Category Navigation */}
            <nav className="menu-categories">
              {categories.map((category) => (
                <button
                  key={category.key}
                  className={`category-btn ${activeFilter === category.key ? 'active' : ''}`}
                  onClick={() => setActiveFilter(category.key)}
                >
                  <span className="category-icon">
                    {category.key === 'All' && 'üçΩÔ∏è'}
                    {category.key === 'Espresso' && '‚òï'}
                    {category.key === 'Latte' && 'ü•õ'}
                    {category.key === 'Cappuccino' && '‚òï'}
                    {category.key === 'Pastries' && 'ü•ê'}
                  </span>
                  {category.label}
                </button>
              ))}
            </nav>

            {/* Online Ordering Options */}
            <div className="sidebar-actions">
              <button className="action-btn primary">
                <span className="btn-icon">üõí</span>
                ƒê·∫∑t h√†ng tr·ª±c tuy·∫øn
              </button>
              <button className="action-btn secondary">
                <span className="btn-icon">üìã</span>
                ƒê·∫∑t ch·ªó
              </button>
            </div>

            {/* Cart Summary */}
            {cartItemCount > 0 && (
              <div className="cart-summary">
                <div className="cart-header">
                  <h3 className="cart-title">
                    <span className="cart-icon">üõí</span>
                    ƒê∆°n h√†ng c·ªßa b·∫°n ({cartItemCount} m√≥n)
                  </h3>
                </div>
                
                <div className="cart-items">
                  {cartItems.map((item) => (
                    <div key={item.id} className="cart-item">
                      <div className="cart-item-info">
                        <span className="cart-item-emoji">{item.image}</span>
                        <div className="cart-item-details">
                          <p className="cart-item-name">{item.name}</p>
                          <p className="cart-item-price">{item.price} x {item.quantity}</p>
                        </div>
                      </div>
                      <div className="cart-item-controls">
                        <button 
                          className="cart-qty-btn"
                          onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
                        >
                          -
                        </button>
                        <span className="cart-qty">{item.quantity}</span>
                        <button 
                          className="cart-qty-btn"
                          onClick={() => updateCartQuantity(item.id, item.quantity + 1)}
                        >
                          +
                        </button>
                        <button 
                          className="cart-remove-btn"
                          onClick={() => removeFromCart(item.id)}
                        >
                          √ó
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="cart-total">
                  <div className="total-line">
                    <span className="total-label">T·ªïng:</span>
                    <span className="total-amount">${cartTotal.toFixed(2)}</span>
                  </div>
                </div>
                
                <button className="checkout-btn">
                  <span className="btn-icon">üí≥</span>
                  Thanh to√°n
                </button>
              </div>
            )}

          </aside>

          {/* Main Content Area */}
          <div className="menu-content">
            {/* Category Header */}
            <div className="category-header">
              <h1 className="category-title">{activeLabel}</h1>
              <p className="category-subtitle">
                {categorySubtitle(activeFilter)}
              </p>
            </div>

            {/* Menu Items */}
            <div className="menu-items">
              {filteredItems.map((item) => (
                <div key={item.id} className="menu-item-card">
                  <div className="item-image">
                    <span className="item-emoji">{item.image}</span>
                  </div>
                  <div className="item-details">
                    <div className="item-header">
                      <h3 className="item-name">{item.name}</h3>
                      <button className="favorite-btn">‚ô°</button>
                    </div>
                    <p className="item-description">{item.description}</p>
                    <div className="item-footer">
                      <span className="item-price">{item.price}</span>
                      <div className="item-actions">
                        <button 
                          className="quantity-btn"
                          onClick={() => updateQuantity(item.id, getItemQuantity(item.id) - 1)}
                        >
                          -
                        </button>
                        <span className="quantity">{getItemQuantity(item.id)}</span>
                        <button 
                          className="quantity-btn"
                          onClick={() => updateQuantity(item.id, getItemQuantity(item.id) + 1)}
                        >
                          +
                        </button>
                        <button 
                          className="add-to-cart"
                          onClick={() => addToCart(item)}
                        >
                          Th√™m v√†o gi·ªè
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Menu;